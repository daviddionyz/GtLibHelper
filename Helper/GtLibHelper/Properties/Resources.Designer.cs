//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GtLibHelper.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GtLibHelper.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Author:   Gregorics Tibor
        /////Date:     2017.08.31.
        /////Title:    enumerating the element of an array
        ///
        ///#pragma once
        ///
        ///#include &quot;enumerator.hpp&quot;
        ///#include &lt;vector&gt;
        ///
        /////template class of enumerations over arrays
        /////template parameters:  Item    - the type of the elements that are enumerated
        /////overrode methods:     first(), next(), end(), current()
        /////representation:       vector&lt;Item&gt; *_vect - the array that must be enumerated
        /////                      unsigned int _ind            - index of enumeration
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string arrayenumerator {
            get {
                return ResourceManager.GetString("arrayenumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Author:   Gregorics Tibor
        /////Date:     2018.06.30.
        /////Task:     Counting
        ///
        ///#pragma once
        ///
        ///#include &quot;summation.hpp&quot;
        ///
        /////template class of counting
        /////template parameters:  Item    - the type of the elements that are enumerated
        /////overrode methods:     init(), add(), neutral()
        ///template &lt; typename Item &gt;
        ///class Counting : public Summation&lt;Item, int&gt;
        ///{
        ///protected:
        ///    int neutral() const final override { return 0; }
        ///    int add(const int &amp;a, const int &amp;b) const final override { return a + b; }
        ///    int [rest of string was truncated]&quot;;.
        /// </summary>
        public static string counting {
            get {
                return ResourceManager.GetString("counting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Készítette:    Gregorics Tibor
        /////Dátum:         2017.08.31.
        /////Feladat:       Felsorolók ősosztálya
        ///
        ///#pragma once
        ///
        /////Felsorolók őssztály-sablonja
        /////Műveletek: first(), next(), end(), current()
        /////Sablon paraméterek: Item - a felsorolt elemek típusa
        ///template &lt;typename Item&gt;
        ///class Enumerator
        ///{
        ///    public:
        ///        virtual void first() = 0;
        ///        virtual void next() = 0;
        ///        virtual bool end() const = 0;
        ///        virtual Item current() const = 0;
        ///        virtual ~Enumerator(){}
        ///};
        ///.
        /// </summary>
        public static string enumerator {
            get {
                return ResourceManager.GetString("enumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Author:   Gregorics Tibor
        /////Date:     2017.08.31.
        /////Title:    enumerating the element of an interval
        ///
        ///#pragma once
        ///
        ///#include &quot;enumerator.hpp&quot;
        ///
        /////template class of enumerations over intervals
        /////template parameters:  Item    - the type of the elements that are enumerated
        /////overrode methods:     first(), next(), end(), current()
        /////representation:       int _m, _n  - the ends of the interval that must be enumerated
        /////                      int _ind    - index of enumeration
        ///class IntervalEnumerato [rest of string was truncated]&quot;;.
        /// </summary>
        public static string intervalenumerator {
            get {
                return ResourceManager.GetString("intervalenumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Author:   Gregorics Tibor
        /////Date:     2018.06.30.
        /////Task:     Linear search
        ///
        ///#pragma once
        ///
        ///#include &quot;procedure.hpp&quot;
        ///
        /////template class of linear search
        /////template parameters:  Item            - the type of the elements that are enumerated
        /////                      bool optimist   - sets the version of linear search
        /////overrode methods:     init(), whileCond(), body()
        /////new methods:          found(), elem() - gives back the result of linear search
        /////new virtual methods:  cond()          - defines  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string linsearch {
            get {
                return ResourceManager.GetString("linsearch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Author:   Gregorics Tibor
        /////Date:     2017.08.31.
        /////Title:    General maximum search
        ///
        ///#pragma once
        ///
        ///#include &quot;procedure.hpp&quot;
        ///
        /////template class including &quot;greatert&quot; relation
        /////Method: operátor()
        /////template parameter: Value - type of the values that must be compared
        ///template &lt;typename Value&gt; // Value implements the operator&gt;()
        ///class Greater{
        ///    public:
        ///        bool operator()(const Value&amp; l, const Value&amp; r){
        ///            return l &gt; r;
        ///        }
        ///};
        ///
        /////template class including &quot;less&quot; relati [rest of string was truncated]&quot;;.
        /// </summary>
        public static string maxsearch {
            get {
                return ResourceManager.GetString("maxsearch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Author:   Gregorics Tibor
        /////Date:     2018.06.30.
        /////Task:     general algorithmic pattern
        ///
        ///#pragma once
        ///
        ///#include &lt;cstddef&gt;
        ///#include &quot;enumerator.hpp&quot;
        ///#include &lt;iostream&gt;
        ///#include &lt;vector&gt;
        ///
        ///template &lt; typename Item, typename Value&gt; class Summation;
        ///template &lt; typename Item&gt; class Summation&lt;Item, std::ostream&gt;;
        ///template &lt; typename Item, typename Value &gt; class Summation&lt;Item, std::vector&lt;Value&gt; &gt; ;
        ///template &lt; typename Value&gt; class Greater;
        ///template &lt; typename Value&gt; class Less;
        ///template &lt; typ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string procedure {
            get {
                return ResourceManager.GetString("procedure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Author:   Gregorics Tibor
        /////Date:     2018.06.30.
        /////Task:     Selection
        ///
        ///#pragma once
        ///
        ///#include &quot;procedure.hpp&quot;
        ///
        /////template class of linear search
        /////template parameters:  Item        - the type of the elements that are enumerated
        /////overrode methods:     init(), loopCond(), body()
        /////new methods:          result()    - gives back the result of selection
        /////new virtual methods:  cond()      - defines a condition on an Item type element
        ///template &lt; typename Item &gt;
        ///class Selection : public Procedur [rest of string was truncated]&quot;;.
        /// </summary>
        public static string selection {
            get {
                return ResourceManager.GetString("selection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Author:   Gregorics Tibor
        /////Date:     2018.06.30.
        /////Task:     class of the enumerator of sequential input files
        ///
        ///#pragma once
        ///
        ///#include &lt;fstream&gt;
        ///#include &lt;typeinfo&gt;
        ///#include &lt;sstream&gt;
        ///
        ///#include &quot;enumerator.hpp&quot;
        ///
        /////template class of the enumerator of sequential input files
        /////template parameters:  Item    - the type of the elements that are enumerated
        /////overrode methods:     first(), next(), current(), end()
        /////representation:       std::ifstream _f        - text file that contains the elemen [rest of string was truncated]&quot;;.
        /// </summary>
        public static string seqinfileenumerator {
            get {
                return ResourceManager.GetString("seqinfileenumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Author:   Gregorics Tibor
        /////Date:     2017.08.31.
        /////Title:    enumerating the element of a stringstream
        ///
        ///#pragma once
        ///
        ///#include &lt;typeinfo&gt;
        ///#include &lt;sstream&gt;
        ///
        ///#include &quot;enumerator.hpp&quot;
        ///
        /////template class of the enumerator of strimgstreams
        /////template parameters:  Item    - the type of the elements that are enumerated
        /////overrode methods:     first(), next(), current(), end()
        /////representation:       std::stringstream _ss   - stringstream that contains the elements that must be enumerated
        /////     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string stringstreamenumerator {
            get {
                return ResourceManager.GetString("stringstreamenumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Author:   Gregorics Tibor
        /////Date:     2018.06.30.
        /////Task:     Summation
        ///
        ///#pragma once
        ///
        ///#include &quot;procedure.hpp&quot;
        ///#include &lt;iostream&gt;
        /////#include &lt;vector&gt;
        ///
        /////template class of summation
        /////template parameters:  Item    - the type of the elements that are enumerated
        /////                      Value   - the type of the values of the elements that are enumerated
        /////overrode methods:     body()
        /////new methods:          result()    - gives back the result of summation
        /////new virtual methods:  neutral()    [rest of string was truncated]&quot;;.
        /// </summary>
        public static string summation {
            get {
                return ResourceManager.GetString("summation", resourceCulture);
            }
        }
    }
}
